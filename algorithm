semaphore: Chopstick -> S
when philosopher grab the Chopstick -> excute operation wait() or P(S)
when philosopher release the Chopstick -> excute operation signal() or V(S)

we're gonna use array of Chopstick -> Chopstick[5]
variable i will be initialized 0 -> 4
below this text you will find explination what will philosopher do
when he want to eat or leave

do
{
	//enter the room
	wait(Chopstick[i])
	wait(Chopstick[(i + 1) % 5])
	// start eating
	signal(Chopstick[i])
	signal(Chopstick[(i + 1) % 5])
	//thinking
} while(true)

As i explained in the file README.md the problem is that philosopher
will use two Chopstick the one on his left and right hand
so that's why we see two wait() and two signal() operation.

so if P0 enter while use Chopstick[0] and Chopstick[1] right??
it sounds confusing that we use the operation 
(i + 1) % 5 we can say that we can just use to incremnet i++ 
let me tell you are wrong.

the simple reason why:
in the best case P0 enter no problem if we use i++
but let see our worse case is P4
if the philosopher P4 enter he need to have Chopstick C4 and C0
so if we do i++ he will have access to the Chopstick C6 which is
not the case of our problem so to let philosopher P4 have
access to Chopstick C0 we did the operation [(i + 1) % 5]
we say i goes from 0 to 4
so [(4 + 1) % 5] = 0

